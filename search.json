{"Extensions/NSLock.html#/s:8Deferred7LockingP12withReadLockqd__qd__yKcKlF":{"name":"withReadLock(_:)","parent_name":"NSLock"},"Extensions/NSLock.html#/s:8Deferred7LockingP21withAttemptedReadLockqd__Sgqd__yKcKlF":{"name":"withAttemptedReadLock(_:)","parent_name":"NSLock"},"Extensions/DispatchSemaphore.html#/s:8Deferred7LockingP12withReadLockqd__qd__yKcKlF":{"name":"withReadLock(_:)","parent_name":"DispatchSemaphore"},"Extensions/DispatchSemaphore.html#/s:8Deferred7LockingP21withAttemptedReadLockqd__Sgqd__yKcKlF":{"name":"withAttemptedReadLock(_:)","parent_name":"DispatchSemaphore"},"Classes/POSIXReadWriteLock.html#/s:8Deferred18POSIXReadWriteLockCACycfc":{"name":"init()","abstract":"<p>Create the standard platform lock.</p>","parent_name":"POSIXReadWriteLock"},"Classes/POSIXReadWriteLock.html#/s:8Deferred7LockingP12withReadLockqd__qd__yKcKlF":{"name":"withReadLock(_:)","parent_name":"POSIXReadWriteLock"},"Classes/POSIXReadWriteLock.html#/s:8Deferred7LockingP21withAttemptedReadLockqd__Sgqd__yKcKlF":{"name":"withAttemptedReadLock(_:)","parent_name":"POSIXReadWriteLock"},"Classes/POSIXReadWriteLock.html#/s:8Deferred7LockingP13withWriteLockqd__qd__yKcKlF":{"name":"withWriteLock(_:)","parent_name":"POSIXReadWriteLock"},"Classes/NativeLock.html#/s:8Deferred10NativeLockCACycfc":{"name":"init()","abstract":"<p>Creates a standard platform lock.</p>","parent_name":"NativeLock"},"Classes/NativeLock.html#/s:8Deferred7LockingP12withReadLockqd__qd__yKcKlF":{"name":"withReadLock(_:)","parent_name":"NativeLock"},"Classes/NativeLock.html#/s:8Deferred7LockingP21withAttemptedReadLockqd__Sgqd__yKcKlF":{"name":"withAttemptedReadLock(_:)","parent_name":"NativeLock"},"Classes/NativeLock.html":{"name":"NativeLock","abstract":"<p>A variant lock backed by a platform type that attempts to allow waiters to"},"Classes/POSIXReadWriteLock.html":{"name":"POSIXReadWriteLock","abstract":"<p>A readers-writer lock provided by the platform implementation of the"},"Extensions/DispatchSemaphore.html":{"name":"DispatchSemaphore","abstract":"<p>A locking construct using a counting semaphore from Grand Central Dispatch."},"Extensions/NSLock.html":{"name":"NSLock","abstract":"<p>A lock object from the Foundation Kit used to coordinate the operation of"},"Protocols/Locking.html#/s:8Deferred7LockingP12withReadLockqd__qd__yKcKlF":{"name":"withReadLock(_:)","abstract":"<p>Call <code>body</code> with a reading lock.</p>","parent_name":"Locking"},"Protocols/Locking.html#/s:8Deferred7LockingP21withAttemptedReadLockqd__Sgqd__yKcKlF":{"name":"withAttemptedReadLock(_:)","abstract":"<p>Attempt to call <code>body</code> with a reading lock.</p>","parent_name":"Locking"},"Protocols/Locking.html#/s:8Deferred7LockingP13withWriteLockqd__qd__yKcKlF":{"name":"withWriteLock(_:)","abstract":"<p>Call <code>body</code> with a writing lock.</p>","parent_name":"Locking"},"Classes/Protected.html#/s:8Deferred9ProtectedCACyxGx12initialValue_AA7Locking_p4locktcfc":{"name":"init(initialValue:lock:)","abstract":"<p>Creates a protected <code>value</code> with a type implementing a <code>lock</code>.</p>","parent_name":"Protected"},"Classes/Protected.html#/s:8Deferred9ProtectedC12withReadLockqd__qd__xKcKlF":{"name":"withReadLock(_:)","abstract":"<p>Give read access to the item within <code>body</code>.</p>","parent_name":"Protected"},"Classes/Protected.html#/s:8Deferred9ProtectedC13withWriteLockqd__qd__xzKcKlF":{"name":"withWriteLock(_:)","abstract":"<p>Give write access to the item within the given function.</p>","parent_name":"Protected"},"Classes/Protected.html#/s:s28CustomDebugStringConvertibleP16debugDescriptionSSv":{"name":"debugDescription","parent_name":"Protected"},"Classes/Protected.html#/s:s17CustomReflectableP12customMirrors0D0Vv":{"name":"customMirror","parent_name":"Protected"},"Classes/Protected.html":{"name":"Protected","abstract":"<p>A protected value only allows access from within a locking statement. This"},"Protocols/Locking.html":{"name":"Locking","abstract":"<p>A type that mutually excludes execution of code such that only one unit of"},"Structs/TaskGroup.html#/s:8Deferred9TaskGroupVACycfc":{"name":"init()","abstract":"<p>Creates the empty task group.</p>","parent_name":"TaskGroup"},"Structs/TaskGroup.html#/s:8Deferred9TaskGroupV7includeyxAA14FutureProtocolRzAA6Either5ValueRpzlF":{"name":"include(_:)","abstract":"<p>Accumulate another task into the list of tasks that fold into the","parent_name":"TaskGroup"},"Structs/TaskGroup.html#/s:8Deferred9TaskGroupV9completedAA6FutureVyytGyF":{"name":"completed()","abstract":"<p>Generate a future which will be filled once all tasks currently given to","parent_name":"TaskGroup"},"Protocols/Either.html#/s:8Deferred6EitherP4Left":{"name":"Left","abstract":"<p>One of the two possible results.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherP5Right":{"name":"Right","abstract":"<p>One of the two possible results.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPx5RightQzyKc4from_tcfc":{"name":"init(from:)","abstract":"<p>Derive a result from a failable function.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPx4LeftQz7failure_tcfc":{"name":"init(failure:)","abstract":"<p>Creates a failed result with <code>error</code>.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherP10withValuesqd__qd__4LeftQzKc02ifE0_qd__5RightQzKc0fG0tKlF":{"name":"withValues(ifLeft:ifRight:)","abstract":"<p>Case analysis.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPAAE11descriptionSSv":{"name":"description","abstract":"<p>A textual representation of this instance.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPAAE16debugDescriptionSSv":{"name":"debugDescription","abstract":"<p>A textual representation of this instance, suitable for debugging.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPAAEx5RightQzyKXK7success_tcfc":{"name":"init(success:)","abstract":"<p>Creates a result with a successful <code>value</code>.</p>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPAAE2qqoi5RightQzx_AFyKXKtKFZ":{"name":"??(_:_:)","abstract":"<p>Performs a coalescing operation, returning the wrapped success value of","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPAAE2qqoiqd__x_qd__yKXKtKAaBRd__5RightQyd__AERtzlFZ":{"name":"??(_:_:)","abstract":"<p>Performs a coalescing operation, returning the success value of <code>lhs</code>","parent_name":"Either"},"Protocols/Either.html#/s:8Deferred6EitherPA2aBRzs5Error_p4LeftRtzlE7extract5RightQzyKF":{"name":"extract()","abstract":"<p>Returns the success value or throws the error.</p>","parent_name":"Either"},"Classes/Task/Result.html#/s:8Deferred4TaskC6ResultO7successAEyx_GxcAGmlF":{"name":"success","abstract":"<p>Contains the success value</p>","parent_name":"Result"},"Classes/Task/Result.html#/s:8Deferred4TaskC6ResultO7failureAEyx_Gs5Error_pcAGmlF":{"name":"failure","abstract":"<p>Contains the error value</p>","parent_name":"Result"},"Classes/Task/Result.html#/s:8Deferred6EitherPx5RightQzyKc4from_tcfc":{"name":"init(from:)","parent_name":"Result"},"Classes/Task/Result.html#/s:8Deferred6EitherPx4LeftQz7failure_tcfc":{"name":"init(failure:)","parent_name":"Result"},"Classes/Task/Result.html#/s:8Deferred6EitherP10withValuesqd__qd__4LeftQzKc02ifE0_qd__5RightQzKc0fG0tKlF":{"name":"withValues(ifLeft:ifRight:)","parent_name":"Result"},"Classes/Task/Result.html#/s:8Deferred4TaskC6ResultOAEyx_GxSg5value_s5Error_pSg5errortcfc":{"name":"init(value:error:)","abstract":"<p>Create an exclusive success/failure state derived from two optionals,","parent_name":"Result"},"Classes/Task/Result.html#/s:8Deferred4TaskC6ResultOAAytRszlEAEyyt_Gycfc":{"name":"init()","abstract":"<p>Creates the success value.</p>","parent_name":"Result"},"Classes/Task/Result.html":{"name":"Result","abstract":"<p>An enum for returning and propagating recoverable errors.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC8progressSo8ProgressCv":{"name":"progress","abstract":"<p>The progress of the task, which may be updated as work is completed.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGAA6FutureVyAC6ResultOyx_GG6future_So8ProgressC8progresstcfc":{"name":"init(future:progress:)","abstract":"<p>Creates a task given a <code>future</code> and its <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Task.html#/s:8Deferred4TaskC8progressSo8ProgressCv\">progress</a></code>.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGycfc":{"name":"init()","abstract":"<p>Create a task that will never complete.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGAA6FutureVyAC6ResultOyx_GG6future_yycSg12cancellationtcfc":{"name":"init(future:cancellation:)","abstract":"<p>Creates a task given a <code>future</code> and an optional <code>cancellation</code>.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGqd___So8ProgressC8progresstc5Value_5RightQYd__RszAA14FutureProtocolRd__AA6EitherAHRpd__s5Error_pAH_4LeftRTd__lufc":{"name":"init(_:progress:)","abstract":"<p>Creates a task whose <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Task.html#/s:8Deferred4TaskC4uponySo13DispatchQueueC_yAC6ResultOyx_Gc7executetF\">upon(_:execute:)</a></code> methods use those of <code>base</code>.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGqd__7success_So8ProgressC8progresstc5ValueQyd__RszAA14FutureProtocolRd__lufc":{"name":"init(success:progress:)","abstract":"<p>Creates a task whose <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Task.html#/s:8Deferred4TaskC4uponySo13DispatchQueueC_yAC6ResultOyx_Gc7executetF\">upon(_:execute:)</a></code> methods use those of <code>base</code>.</p>","parent_name":"Task"},"Classes/Task.html#/init(future:cancellation:)":{"name":"init(future:cancellation:)","abstract":"<p>Creates a task given a <code>future</code> and an optional <code>cancellation</code>.</p>","parent_name":"Task"},"Classes/Task.html#/init()":{"name":"init()","abstract":"<p>Create a task that will never complete.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC4uponySo13DispatchQueueC_yAC6ResultOyx_Gc7executetF":{"name":"upon(_:execute:)","abstract":"<p>Undocumented</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred14FutureProtocolP4uponyAA8Executor_p_y5ValueQzc7executetF":{"name":"upon(_:execute:)","parent_name":"Task"},"Classes/Task.html#/s:8Deferred14FutureProtocolP4peek5ValueQzSgyF":{"name":"peek()","parent_name":"Task"},"Classes/Task.html#/s:8Deferred14FutureProtocolP4wait5ValueQzSg8Dispatch0F4TimeV5until_tF":{"name":"wait(until:)","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC6cancelyyF":{"name":"cancel()","abstract":"<p>Attempt to cancel the underlying operation.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC11isCancelledSbv":{"name":"isCancelled","abstract":"<p>Tests whether the given task has been cancelled.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGqd___yycSg12cancellationtc5Value_5RightQYd__RszAA14FutureProtocolRd__AA6EitherAGRpd__s5Error_pAG_4LeftRTd__lufc":{"name":"init(_:cancellation:)","abstract":"<p>Creates a task whose <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Task.html#/s:8Deferred4TaskC4uponySo13DispatchQueueC_yAC6ResultOyx_Gc7executetF\">upon(_:execute:)</a></code> methods use those of <code>base</code>.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGqd__7success_yycSg12cancellationtc5ValueQyd__RszAA14FutureProtocolRd__lufc":{"name":"init(success:cancellation:)","abstract":"<p>Creates a task whose <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Task.html#/s:8Deferred4TaskC4uponySo13DispatchQueueC_yAC6ResultOyx_Gc7executetF\">upon(_:execute:)</a></code> methods use those of <code>base</code>.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGxyKXK7success_tcfc":{"name":"init(success:)","abstract":"<p>Creates an operation that has already completed with <code>value</code>.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGs5Error_p7failure_tcfc":{"name":"init(failure:)","abstract":"<p>Creates an operation that has already failed with <code>error</code>.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGADcfc":{"name":"init(_:)","abstract":"<p>Creates a task having the same underlying operation as the <code>other</code> task.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC7andThenACy5Value_5RightQYd__GSo13DispatchQueueC4upon_qd__xKc5starttAA14FutureProtocolRd__AA6EitherAERpd__s5Error_pAE_4LeftRTd__lF":{"name":"andThen(upon:start:)","abstract":"<p>Begins another task by passing the result of the task to <code>startNextTask</code>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC7andThenACy5Value_5RightQYd__GAA8Executor_p4upon_qd__xKc5starttAA14FutureProtocolRd__AA6EitherAERpd__s5Error_pAE_4LeftRTd__lF":{"name":"andThen(upon:start:)","abstract":"<p>Begins another task by passing the result of the task to <code>startNextTask</code>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC7ignoredACyytGyF":{"name":"ignored()","abstract":"<p>Returns a task that ignores the successful completion of this task.</p>","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC3mapACyqd__GSo13DispatchQueueC4upon_qd__xKc9transformtlF":{"name":"map(upon:transform:)","abstract":"<p>Returns a <code>Task</code> containing the result of mapping <code>transform</code> over the","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC3mapACyqd__GAA8Executor_p4upon_qd__xKc9transformtlF":{"name":"map(upon:transform:)","abstract":"<p>Returns a <code>Task</code> containing the result of mapping <code>transform</code> over the","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC7recoverACyxGSo13DispatchQueueC4upon_xs5Error_pKc12substitutingtF":{"name":"recover(upon:substituting:)","abstract":"<p>Returns a <code>Task</code> containing the result of mapping <code>substitution</code> over","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC7recoverACyxGAA8Executor_p4upon_xs5Error_pKc12substitutingtF":{"name":"recover(upon:substituting:)","abstract":"<p>Returns a <code>Task</code> containing the result of mapping <code>substitution</code> over","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC8fallbackACyxGSo13DispatchQueueC4upon_qd__s5Error_pc2tot5Value_5RightQYd__RszAA14FutureProtocolRd__AA6EitherAKRpd__sAI_pAK_4LeftRTd__lF":{"name":"fallback(upon:to:)","abstract":"<p>Begins another task in the case of the failure of <code>self</code> by calling","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskC8fallbackACyxGAA8Executor_p4upon_qd__s5Error_pc2tot5Value_5RightQYd__RszAA14FutureProtocolRd__AA6EitherAJRpd__sAH_pAJ_4LeftRTd__lF":{"name":"fallback(upon:to:)","abstract":"<p>Begins another task in the case of the failure of <code>self</code> by calling","parent_name":"Task"},"Classes/Task.html#/s:8Deferred4TaskCACyxGSo13DispatchQueueC4upon_0C00C13WorkItemFlagsV5flagss5Error_pyXK8onCancelxyKc7executetcfc":{"name":"init(upon:flags:onCancel:execute:)","abstract":"<p>Creates a Task around a unit of work <code>body</code> called on a <code>queue</code>.</p>","parent_name":"Task"},"Classes/Task.html":{"name":"Task","abstract":"<p>A wrapper over any task.</p>"},"Protocols/Either.html":{"name":"Either","abstract":"<p>A type that can exclusively represent either some result value of a"},"Structs/TaskGroup.html":{"name":"TaskGroup","abstract":"<p>A tool to support waiting for a number tasks to complete.</p>"},"Extensions/CFRunLoop.html#/s:8Deferred8ExecutorP6submityyycF":{"name":"submit(_:)","parent_name":"CFRunLoop"},"Extensions/RunLoop.html#/s:8Deferred8ExecutorP6submityyycF":{"name":"submit(_:)","parent_name":"RunLoop"},"Extensions/OperationQueue.html#/s:8Deferred8ExecutorP6submityyycF":{"name":"submit(_:)","parent_name":"OperationQueue"},"Extensions/DispatchQueue.html#/s:So13DispatchQueueC8DeferredE3anyAByFZ":{"name":"any()","abstract":"<p>A generic catch-all dispatch queue, for when you just want to throw some","parent_name":"DispatchQueue"},"Extensions/DispatchQueue.html#/s:8Deferred8ExecutorP6submityyycF":{"name":"submit(_:)","parent_name":"DispatchQueue"},"Extensions/DispatchQueue.html#/s:8Deferred8ExecutorP6submity8Dispatch0D8WorkItemCF":{"name":"submit(_:)","parent_name":"DispatchQueue"},"Protocols/Executor.html#/s:8Deferred8ExecutorP6submityyycF":{"name":"submit(_:)","abstract":"<p>Execute the <code>body</code> closure.</p>","parent_name":"Executor"},"Protocols/Executor.html#/s:8Deferred8ExecutorP6submity8Dispatch0D8WorkItemCF":{"name":"submit(_:)","abstract":"<p>Execute the <code>workItem</code>.</p>","parent_name":"Executor"},"Protocols/Executor.html":{"name":"Executor","abstract":"<p>An executor calls closures submitted to it, typically in first-in, first-out"},"Extensions/DispatchQueue.html":{"name":"DispatchQueue","abstract":"<p>Dispatch queues invoke function bodies submitted to them serially in FIFO"},"Extensions/OperationQueue.html":{"name":"OperationQueue","abstract":"<p>An operation queue manages a number of operation objects, making high"},"Extensions/RunLoop.html":{"name":"RunLoop","abstract":"<p>A run loop processes events on a thread, and is a fundamental construct in"},"Extensions/CFRunLoop.html":{"name":"CFRunLoop","abstract":"<p>A run loop processes events on a thread, and is a fundamental construct in"},"Extensions/Sequence.html#/s:s8SequenceP8DeferredsAARzAC14FutureProtocol7ElementRpzlE11firstFilledAC0C0VyAE_5ValueQZGyF":{"name":"firstFilled()","abstract":"<p>Chooses the future that is determined first from <code>self</code>.</p>","parent_name":"Sequence"},"Extensions/Collection.html#/s:s10CollectionP8DeferredsAARzAC14FutureProtocol7ElementRpzlE9allFilledAC0C0VySayAE_5ValueQZGGyF":{"name":"allFilled()","abstract":"<p>Composes a number of futures into a single deferred array.</p>","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP8DeferredsAARzAC14FutureProtocol7ElementRpzAC6EitherAE_5ValueRPzs5Error_pAE_AH4LeftRTzlE12allSucceededAC4TaskCySayAE_AH5RightQZGGyF":{"name":"allSucceeded()","abstract":"<p>Compose a number of tasks into a single array.</p>","parent_name":"Collection"},"Extensions/Collection.html#/s:s10CollectionP8DeferredsAARzAC14FutureProtocol7ElementRpzAC6EitherAE_5ValueRPzs5Error_pAE_AH4LeftRTzytAE_AH5RightRTzlE12allSucceededAC4TaskCyytGyF":{"name":"allSucceeded()","abstract":"<p>Compose a number of tasks into a single array.</p>","parent_name":"Collection"},"Structs/Future.html#/s:8Deferred6FutureVACyxGqd__c5ValueQyd__RszAA0B8ProtocolRd__lufc":{"name":"init(_:)","abstract":"<p>Create a future whose <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Future.html#/s:8Deferred6FutureV4uponySo13DispatchQueueC_yxc7executetF\">upon(_:execute:)</a></code> methods forward to <code>base</code>.</p>","parent_name":"Future"},"Structs/Future.html#/s:8Deferred6FutureVACyxGx5value_tcfc":{"name":"init(value:)","abstract":"<p>Wrap and forward future as if it were always filled with <code>value</code>.</p>","parent_name":"Future"},"Structs/Future.html#/s:8Deferred6FutureVACyxGycfc":{"name":"init()","abstract":"<p>Create a future that will never get fulfilled.</p>","parent_name":"Future"},"Structs/Future.html#/s:8Deferred6FutureVACyxGADcfc":{"name":"init(_:)","abstract":"<p>Create a future having the same underlying future as <code>other</code>.</p>","parent_name":"Future"},"Structs/Future.html#/s:8Deferred6FutureV4uponySo13DispatchQueueC_yxc7executetF":{"name":"upon(_:execute:)","abstract":"<p>Undocumented</p>","parent_name":"Future"},"Structs/Future.html#/s:8Deferred14FutureProtocolP4uponyAA8Executor_p_y5ValueQzc7executetF":{"name":"upon(_:execute:)","parent_name":"Future"},"Structs/Future.html#/s:8Deferred14FutureProtocolP4peek5ValueQzSgyF":{"name":"peek()","parent_name":"Future"},"Structs/Future.html#/s:8Deferred14FutureProtocolP4wait5ValueQzSg8Dispatch0F4TimeV5until_tF":{"name":"wait(until:)","parent_name":"Future"},"Structs/Future.html#/s:8Deferred6FutureVA2A6EitherRzs5Error_p4LeftRtzlEACyxGqd__4task_tcAA0B8ProtocolRd__5Value_5RightQYd__ALRtzAadKRpd__sAE_pAK_AFRTd__lufc":{"name":"init(task:)","abstract":"<p>Create a future having the same underlying task as <code>other</code>.</p>","parent_name":"Future"},"Structs/Future.html#/s:8Deferred6FutureVA2A6EitherRzs5Error_p4LeftRtzlEACyxGqd__7success_tcAA0B8ProtocolRd__5ValueQyd__5RightRtzlufc":{"name":"init(success:)","abstract":"<p>Create a future having the same underlying task as <code>other</code>.</p>","parent_name":"Future"},"Structs/Future.html":{"name":"Future","abstract":"<p>A type-erased wrapper over any future.</p>"},"Extensions/Collection.html":{"name":"Collection"},"Extensions/Sequence.html":{"name":"Sequence"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolP5Value":{"name":"Value","abstract":"<p>A type that represents the result of some asynchronous operation.</p>","parent_name":"PromiseProtocol"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolPxycfc":{"name":"init()","abstract":"<p>Creates an instance in a default, unfilled state.</p>","parent_name":"PromiseProtocol"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolP8isFilledSbv":{"name":"isFilled","abstract":"<p>Check whether or not the receiver is filled.</p>","parent_name":"PromiseProtocol"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolP4fillSb5ValueQz4with_tF":{"name":"fill(with:)","abstract":"<p>Determines the promise with <code>value</code>.</p>","parent_name":"PromiseProtocol"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolPAAE8mustFilly5ValueQz4with_s12StaticStringV4fileSu4linetF":{"name":"mustFill(with:file:line:)","abstract":"<p>Determines the deferred <code>value</code>.</p>","parent_name":"PromiseProtocol"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolPA2aBRzAA6Either5ValueRpzlE7succeedSbAE_5RightQZyKXK4with_tF":{"name":"succeed(with:)","abstract":"<p>Completes the task with a successful <code>value</code>, or a thrown error.</p>","parent_name":"PromiseProtocol"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolPA2aBRzAA6Either5ValueRpzlE4failSbAE_4LeftQZ4with_tF":{"name":"fail(with:)","abstract":"<p>Completes the task with a failed <code>error</code>.</p>","parent_name":"PromiseProtocol"},"Protocols/PromiseProtocol.html#/s:8Deferred15PromiseProtocolPA2aBRzAA6Either5ValueRpzytAE_5RightRTzlE7succeedSbyF":{"name":"succeed()","abstract":"<p>Notes the completion of the event with a success.</p>","parent_name":"PromiseProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolP5Value":{"name":"Value","abstract":"<p>A type that represents the result of some asynchronous operation.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolP4uponyAA8Executor_p_y5ValueQzc7executetF":{"name":"upon(_:execute:)","abstract":"<p>Call some <code>body</code> closure once the value is determined.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolP4peek5ValueQzSgyF":{"name":"peek()","abstract":"<p>Checks for and returns a determined value.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolP4wait5ValueQzSg8Dispatch0F4TimeV5until_tF":{"name":"wait(until:)","abstract":"<p>Waits synchronously for the value to become determined.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE16debugDescriptionSSv":{"name":"debugDescription","abstract":"<p>A textual representation of this instance, suitable for debugging.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE12customMirrors0E0Vv":{"name":"customMirror","abstract":"<p>Return the <code>Mirror</code> for <code>self</code>.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE7andThenAA0B0Vy5ValueQyd__GSo13DispatchQueueC4upon_qd__AGQzc5starttAaBRd__lF":{"name":"andThen(upon:start:)","abstract":"<p>Begins another asynchronous operation by passing the deferred value to","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE7andThenAA0B0Vy5ValueQyd__GAA8Executor_p4upon_qd__AGQzc5starttAaBRd__lF":{"name":"andThen(upon:start:)","abstract":"<p>Begins another asynchronous operation by passing the deferred value to","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3andAA0B0Vy5ValueQz_AGQyd__tGqd__AaBRd__lF":{"name":"and(_:)","abstract":"<p>Returns a value that becomes determined after both the callee and the","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3andAA0B0Vy5ValueQz_AGQyd__AGQyd_0_tGqd___qd_0_tAaBRd__AaBRd_0_r0_lF":{"name":"and(_:_:)","abstract":"<p>Returns a value that becomes determined after the callee and both other","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3andAA0B0Vy5ValueQz_AGQyd__AGQyd_0_AGQyd_1_tGqd___qd_0_qd_1_tAaBRd__AaBRd_0_AaBRd_1_r1_lF":{"name":"and(_:_:_:)","abstract":"<p>Returns a value that becomes determined after the callee and all other","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3andAA0B0Vy5ValueQz_AGQyd__AGQyd_0_AGQyd_1_AGQyd_2_tGqd___qd_0_qd_1_qd_2_tAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_r2_lF":{"name":"and(_:_:_:_:)","abstract":"<p>Returns a value that becomes determined after the callee and all other","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3andAA0B0Vy5ValueQz_AGQyd__AGQyd_0_AGQyd_1_AGQyd_2_AGQyd_3_tGqd___qd_0_qd_1_qd_2_qd_3_tAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_r3_lF":{"name":"and(_:_:_:_:_:)","abstract":"<p>Returns a value that becomes determined after the callee and all other","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3andAA0B0Vy5ValueQz_AGQyd__AGQyd_0_AGQyd_1_AGQyd_2_AGQyd_3_AGQyd_4_tGqd___qd_0_qd_1_qd_2_qd_3_qd_4_tAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AaBRd_4_r4_lF":{"name":"and(_:_:_:_:_:_:)","abstract":"<p>Returns a value that becomes determined after the callee and all other","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3andAA0B0Vy5ValueQz_AGQyd__AGQyd_0_AGQyd_1_AGQyd_2_AGQyd_3_AGQyd_4_AGQyd_5_tGqd___qd_0_qd_1_qd_2_qd_3_qd_4_qd_5_tAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AaBRd_4_AaBRd_5_r5_lF":{"name":"and(_:_:_:_:_:_:_:)","abstract":"<p>Returns a value that becomes determined after the callee and all other","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE5everyAA0B0Vyqd__Gqd__5ValueQzc3per_tlF":{"name":"every(per:)","abstract":"<p>Returns a future that transparently performs the <code>eachUseTransform</code>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE7ignoredAA0B0VyytGyF":{"name":"ignored()","abstract":"<p>Returns a future that ignores the result of this future.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3mapAA0B0Vyqd__GSo13DispatchQueueC4upon_qd__5ValueQzc9transformtlF":{"name":"map(upon:transform:)","abstract":"<p>Returns a future containing the result of mapping <code>transform</code> over the","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE3mapAA0B0Vyqd__GAA8Executor_p4upon_qd__5ValueQzc9transformtlF":{"name":"map(upon:transform:)","abstract":"<p>Returns a future containing the result of mapping <code>transform</code> over the","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE17PreferredExecutora":{"name":"PreferredExecutor","abstract":"<p>The natural executor for use with futures; a policy of the framework to","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPAAE19defaultUponExecutorSo13DispatchQueueCvZ":{"name":"defaultUponExecutor","abstract":"<p>The executor to use as a default argument to <code>upon</code> methods on <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Future.html\">Future</a></code>.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPA2aBRzAA6Either5ValueRpzlE11uponSuccessyAA8Executor_p2on_yAE_5RightQZc7executetF":{"name":"uponSuccess(on:execute:)","abstract":"<p>Call some <code>body</code> closure if the future successfully resolves a value.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPA2aBRzAA6Either5ValueRpzlE11uponFailureyAA8Executor_p2on_yAE_4LeftQZc7executetF":{"name":"uponFailure(on:execute:)","abstract":"<p>Call some <code>body</code> closure if the future produces an error.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPA2aBRzAA6Either5ValueRpzlE11uponSuccessySo13DispatchQueueC2on_yAE_5RightQZc7executetF":{"name":"uponSuccess(on:execute:)","abstract":"<p>Call some <code>body</code> closure if the future successfully resolves a value.</p>","parent_name":"FutureProtocol"},"Protocols/FutureProtocol.html#/s:8Deferred14FutureProtocolPA2aBRzAA6Either5ValueRpzlE11uponFailureySo13DispatchQueueC2on_yAE_4LeftQZc7executetF":{"name":"uponFailure(on:execute:)","abstract":"<p>Call some <code>body</code> closure if the future produces an error.</p>","parent_name":"FutureProtocol"},"Structs/Deferred.html#/s:8Deferred15PromiseProtocolPxycfc":{"name":"init()","parent_name":"Deferred"},"Structs/Deferred.html#/s:8DeferredAAVAByxGx10filledWith_tcfc":{"name":"init(filledWith:)","abstract":"<p>Creates an instance resolved with <code>value</code>.</p>","parent_name":"Deferred"},"Structs/Deferred.html#/s:8Deferred14FutureProtocolP4uponyAA8Executor_p_y5ValueQzc7executetF":{"name":"upon(_:execute:)","parent_name":"Deferred"},"Structs/Deferred.html#/s:8Deferred14FutureProtocolP4peek5ValueQzSgyF":{"name":"peek()","parent_name":"Deferred"},"Structs/Deferred.html#/s:8Deferred14FutureProtocolP4wait5ValueQzSg8Dispatch0F4TimeV5until_tF":{"name":"wait(until:)","parent_name":"Deferred"},"Structs/Deferred.html#/s:8Deferred15PromiseProtocolP4fillSb5ValueQz4with_tF":{"name":"fill(with:)","parent_name":"Deferred"},"Structs/Deferred.html":{"name":"Deferred","abstract":"<p>A value that may become determined (or <q>filled</q>) at some point in the"},"Protocols/FutureProtocol.html":{"name":"FutureProtocol","abstract":"<p>A future models reading a value which may become available at some point.</p>"},"Protocols/PromiseProtocol.html":{"name":"PromiseProtocol","abstract":"<p>A promise models writing the result of some asynchronous operation.</p>"},"why-deferred.html":{"name":"Why Deferred?"},"basic-tasks.html":{"name":"Basic Tasks"},"mastering-the-future-type.html":{"name":"Mastering The Future Type"},"getting-started.html":{"name":"Getting Started"},"Intuition.html":{"name":"Intuition"},"Futures and Promises.html":{"name":"Futures and Promises"},"Transforming Futures.html":{"name":"Transforming Futures"},"Controlling Where Callbacks Execute.html":{"name":"Controlling Where Callbacks Execute"},"Futures Than Can Fail.html":{"name":"Futures Than Can Fail"},"Coordinating Access to Data.html":{"name":"Coordinating Access to Data"},"Coordination Primitives.html":{"name":"Coordination Primitives"}}